set nocompatible " vi incompatible mode
set encoding=UTF-8
set cursorline
set nu " line numbering is on
set wrap " line wrap
set lbr  " by word (not by charcter as by default)
set tabstop=4 " tab width measured in spaces
set shiftwidth=4
set autoindent
set expandtab
set colorcolumn=80
" displaying tab characters and trailing spaces
" with special characters \u2592\u2591 and \u2593
" They also may be '>-' and '@':
" :set listchars=tab:>-,trail:@
set lcs=tab:▒░,trail:▓
set list

set foldmethod=indent
set foldlevel=99

" shortcut for paste mode
" http://superuser.com/questions/134709/how-can-i-keep-the-code-formated-as-original-source-when-i-paste-them-to-vim
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

set fo=tcq1
set hlsearch " highlighting results while searching

set grepprg=ack-grep

set path+=~/repogitories

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2


" VIM-PLUG plugin manager
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!mkdir -p ~/.vim/autoload; curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif
call plug#begin('~/.vim/plugged')

    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

    """""""" AUTOCOMPLETE """"""""

    " Autocompletion for C/C++ (clang), JavaScript (tern) and Rust (racer)
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer --racer-completer', 'for': ['c', 'cpp', 'javascript', 'rust'] }

    " Python autocompletion
    Plug 'davidhalter/jedi-vim', { 'for': 'python' }

    " Emmet
    Plug 'mattn/emmet-vim', { 'for': ['html', 'css', 'stylus', 'scss', 'sass', 'less'] }

    """""""" SYNTAX HIGHLIGHTING """"""""

    Plug 'othree/yajs.vim', { 'for': 'javascript' }
    Plug 'vim-scripts/vim-stylus', { 'for': 'stylus' }
    " Подсветка литералов цвета соответствующим цветом
    Plug 'lilydjwg/colorizer', { 'for': ['css', 'stylus', 'scss', 'sass', 'less'] }

    " 256-color schemes
    Plug 'godlygeek/csapprox'
    Plug 'vim-scripts/wombat256.vim'
    Plug 'vim-scripts/3DGlasses.vim'
    Plug 'altercation/vim-colors-solarized'
    Plug 'fugalh/desert.vim'
    Plug 'chriskempson/vim-tomorrow-theme'
    Plug 'nanotech/jellybeans.vim'

    """""""" SYNTAX CHECKERS """"""""

    Plug 'vim-syntastic/syntastic'

    """""""" OTHERS """"""""

    Plug 'editorconfig/editorconfig-vim'
    Plug 'tpope/vim-surround'
    Plug 'junegunn/vim-easy-align'
    Plug 'easymotion/vim-easymotion'
    Plug 'terryma/vim-multiple-cursors'
    Plug 'tomtom/quickfixsigns_vim'
    Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

    " Filetree
    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
    Plug 'jistr/vim-nerdtree-tabs', { 'on':  'NERDTreeToggle' }

    " Class outline viewer
    " https://majutsushi.github.io/tagbar/
    Plug 'majutsushi/tagbar'

call plug#end()
filetype plugin indent on
" VIM-PLUG END


" NERDTREE and NERDTREETABS
let NERDTreeIgnore=['\.pyc$', '\~$']
" Боковое окно с Nerdtree, если vim запущен без аргументов
autocmd vimenter * if !argc() | NERDTree | endif
map <F3> :NERDTreeTabsToggle<CR>
" NERDTREE and NERDTREETABS END


" TAGBAR
map <F8> :TagbarToggle<CR>
let g:tagbar_autoclose = 1
" TAGBAR END


" SYNTASTIC
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_javascript_checkers=['jslint']
" SYNTASTIC END


" JEDIVIM (autocompletion for Python)
" Отключить автоматический выбор первого элемента из всплывающего списка
let g:jedi#auto_initialization = 0
" JEDIVIM END


" YOUCOMPLETEME and ULTISPNIPS
"let g:ycm_auto_trigger = 0
"let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_key_list_select_completion = ['CTRL-N', 'Down']
let g:ycm_key_list_previous_completion = ['CTRL-P', 'Up']
let g:ycm_confirm_extra_conf = 1
" https://github.com/Valloric/YouCompleteMe/issues/420#issuecomment-28773618
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        call UltiSnips#JumpForwards()
        if g:ulti_jump_forwards_res == 0
           return "\<TAB>"
        endif
    endif
    return ""
endfunction
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<F4>"
" YOUCOMPLETEME and ULTISPNIPS END


" MULTIPLE-CURSORS
"function! Multiple_cursors_before()
"    let g:ycm_auto_trigger = 0
"endfunction
"function! Multiple_cursors_after()
"    let g:ycm_auto_trigger = 1
"endfunction
" MULTIPLE-CURSORS END


" Russian to English key mapping
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" colors
if !exists("g:syntax_on")
    syntax enable
endif
"let g:solarized_termcolors=256
"let g:solarized_bold=1
"let g:solarized_italic=1
"let g:solarized_underline=1
"let g:solarized_contrast="high"
"set background=light
"colorscheme solarized
colorscheme jellybeans
"colorscheme desert

" directory where the swap files are stored
set dir=~/.vim/temp/,$HOME/Local\ Settings/Temp
" directory where the backup files are stored
set backupdir=~/.vim/temp/,$HOME/Local\ Settings/Temp

" check if a file has been changed
au CursorHold,BufEnter,WinEnter,BufWinEnter,TabEnter * checktime

nmap gb :buffers<CR>
