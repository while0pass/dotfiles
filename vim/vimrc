set nocompatible " vi incompatible mode
set encoding=UTF-8
set cursorline
set nu " line numbering is on
set wrap " line wrap
set lbr  " by word (not by charcter as by default)
set tabstop=4 " tab width measured in spaces
set shiftwidth=4
set autoindent
set expandtab
set scrolloff=5
set colorcolumn=80
" displaying tab characters and trailing spaces
" with special characters \u2592\u2591 and \u2593
" They also may be '>-' and '@':
" :set listchars=tab:>-,trail:@
set lcs=tab:▒░,trail:▓
set list

set foldmethod=indent
set foldlevel=99

" shortcut for paste mode
" http://superuser.com/questions/134709/
" how-can-i-keep-the-code-formated-as-original-source-when-i-paste-them-to-vim
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

set fo=tcq1
set hlsearch " highlighting results while searching

set grepprg=ack-grep

set path+=~/repogitories

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

" VIM-PLUG plugin manager
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source ~/.vim/vimrc
endif
call plug#begin('~/.vim/plugged')

    """""""" AUTOCOMPLETE """"""""

    " Autocompletion for C/C++ (clang), JavaScript (tern) and Rust (racer)
    Plug 'Valloric/YouCompleteMe', { 'do':
        \ './install.py --clang-completer --tern-completer --racer-completer',
        \ 'for': ['c', 'cpp', 'javascript', 'rust'] }
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
    runtime vimrc.d/youcompleteme_ultisnips

    " Python autocompletion
    Plug 'davidhalter/jedi-vim', { 'for': 'python' } | runtime vimrc.d/jedivim

    " Emmet
    Plug 'mattn/emmet-vim', { 'for': ['html', 'css',
                                    \ 'stylus', 'scss', 'sass', 'less'] }

    """""""" SYNTAX HIGHLIGHTING """"""""

    Plug 'othree/yajs.vim', { 'for': 'javascript' }
    Plug 'vim-scripts/vim-stylus', { 'for': 'stylus' }
    " Подсветка литералов цвета соответствующим цветом
    Plug 'lilydjwg/colorizer', { 'for': ['css',
                                       \ 'stylus', 'scss', 'sass', 'less'] }
    Plug 'rust-lang/rust.vim'
    Plug 'saltstack/salt-vim'

    " 256-color schemes
    Plug 'godlygeek/csapprox'
    Plug 'vim-scripts/wombat256.vim'
    Plug 'vim-scripts/3DGlasses.vim'
    Plug 'altercation/vim-colors-solarized'
    Plug 'fugalh/desert.vim'
    Plug 'chriskempson/vim-tomorrow-theme'
    Plug 'nanotech/jellybeans.vim'
    Plug 'junegunn/seoul256.vim'

    """""""" SYNTAX CHECKERS """"""""

    Plug 'vim-syntastic/syntastic' | runtime vimrc.d/syntastic

    """""""" OTHERS """"""""

    Plug 'editorconfig/editorconfig-vim'
    Plug 'tpope/vim-surround'
    Plug 'junegunn/vim-easy-align' | runtime vimrc.d/easyAlign
    Plug 'easymotion/vim-easymotion'
    Plug 'jeetsukumaran/vim-indentwise'
    Plug 'terryma/vim-multiple-cursors' | runtime vimrc.d/multipleCursors
    Plug 'tomtom/quickfixsigns_vim'
    Plug 'junegunn/limelight.vim', { 'on': 'Goyo' }
    Plug 'junegunn/goyo.vim', { 'on': 'Goyo' } | runtime vimrc.d/goyo

    " Filetree
    Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
    runtime vimrc.d/nerdtree

    " Class outline viewer
    " https://majutsushi.github.io/tagbar/
    Plug 'majutsushi/tagbar' | runtime vimrc.d/tagbar

call plug#end()
filetype plugin indent on
" VIM-PLUG END


" Russian to English key mapping
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,
           \фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" colors
if !exists("g:syntax_on")
    syntax enable
endif
"runtime vimrc.d/colors/solorized
runtime vimrc.d/colors/seoul256

" directory where the swap files are stored
set dir=~/.vim/temp/,$HOME/Local\ Settings/Temp
" directory where the backup files are stored
set backupdir=~/.vim/temp/,$HOME/Local\ Settings/Temp

" check if a file has been changed
au CursorHold,BufEnter,WinEnter,BufWinEnter,TabEnter * checktime

nmap gb :buffers<CR>
